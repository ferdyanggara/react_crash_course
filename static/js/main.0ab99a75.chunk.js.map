{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","backgroundColor","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","React","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ab99a75.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\"; \r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todolist</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> |\r\n            <Link style={linkStyle} to=\"About\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: \"#333\",\r\n    color: \"#fff\",\r\n    textAlign:\"center\",\r\n    padding: \"10px\"\r\n}\r\n\r\nconst linkStyle = {\r\n    color:\"#fff\",\r\n    textDecoration:\"none\"\r\n}\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            backgroundColor:\"grey\",\r\n            padding: \"10px\",\r\n            borderBottom: \"1px #ccc dotted\",\r\n            textDecoration : this.props.todo.completed ? \"line-through\" : \"none\"\r\n        }\r\n        }\r\n    \r\n\r\n    render() {\r\n        const { id, title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                \r\n                <p><input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>\r\n                {title}\r\n                <button onClick={this.props.delTodo.bind(this,id)} style = {btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todos: PropTypes.object.isRequired\r\n    \r\n}\r\n\r\nconst btnStyle = {\r\n    backgroundColor: \"#ff0000\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    padding: \"5px 9px\",\r\n    borderRadius: \"50%\",\r\n    cursor:\"pointer\",\r\n    float: \"right\"\r\n}\r\n\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n    \r\n    \r\n\r\n    render() {\r\n        return this.props.todos.map((todo)=>(\r\n        <TodoItem key={todo.id} todo={todo} markComplete = {\r\n        this.props.markComplete} delTodo = {this.props.delTodo}/>\r\n        ));\r\n    }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n    title :\"\"\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:\"\"});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n           <form onSubmit = {this.onSubmit} style={{\r\n                display:\"flex\"\r\n           }}>\r\n               <input type=\"text\" name=\"title\" placeholder=\"add Todo...\"\r\n               style ={{flex : \"10\" , padding : \"5px\"}}\r\n               value ={this.state.title}\r\n               onChange = {this.onChange}\r\n               />\r\n               <input type=\"submit\" value=\"Submit\" \r\n               className = \"btn\"\r\n                   style={{ flex: \"1\"}}/>\r\n           </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// PropTypes\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>This is the todo list app v1.09</p>\r\n            </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React , {Component} from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Header from \"./components/layout/Header\";\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\n// import uuid from \"uuid/v4\";\nimport axios from 'axios';\nclass App extends React.Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=1\").then(res => this.setState({todos: res.data}))\n  }\n  // Toggle Complete\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo =>{\n      if (todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n  }\n\n  // Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }));\n   \n  }\n   \n  \n  // Add Todo\n  addTodo = (title) =>{\n    // const newTodo = {\n    //   id: uuid(),\n    //   title,\n    //   completed:false\n    // }\n   axios.post(\"https://jsonplaceholder.typicode.com/todos\",{\n      title,\n      completed:false\n    }).then(res => this.setState({ todos: [...this.state.todos, res.data] }));\n    \n\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props =>(\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                  delTodo={this.delTodo} />\n                </React.Fragment>\n            )}/>\n            <Route path=\"/about\" component={About}/>\n          </div>\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}